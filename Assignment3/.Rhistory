# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/t22crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "t22cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e22", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t23.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/t23crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "t23cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e23", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t24.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/t24crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "t24cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e24", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t25.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t26.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
#plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/t26crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "t26cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e26", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/SEDI.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
#plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/SEDIcrown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "SEDIcell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "eSEDI", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t25.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
#plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/25crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "25cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e25", driver = "ESRI Shapefile")
library(ForestTools)
library(raster)
library(rgdal)
#library(tictoc)
a="D:/Sedi'sFiles/prototype/trees/t3.tif"
inCHM <- raster(a)
inCHM = raster::trim(inCHM, padding=0, values=NA)
plot(inCHM)
#tic("time:")
lin <- function(x){x * 1 + 0.6}
minHgt <- 2
ttops <- vwf(CHM = inCHM, winFun= lin, minHgt, maxWinDiameter = NULL, minWinNeib = "queen", verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add dominant treetops to the plot
#plot(ttops, col = "blue", pch = 20, cex = 0.5, add = TRUE)
# Get the mean treetop height
mean(ttops$height)
# Create crown map
crowns <- mcws(treetops = ttops, CHM = inCHM, minHeight = 2, verbose = FALSE)
#plot(crowns)
# Plot crowns
plot(crowns, col = sample(rainbow(50), length(unique(crowns[])), replace = TRUE), legend = FALSE, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
#toc()
# Create polygon crown map
crownsPoly <- mcws(treetops = ttops, CHM = inCHM, format = "polygons", minHeight = 1.5, verbose = FALSE)
# Plot CHM
plot(inCHM, xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Add crown outlines to the plot
plot(crownsPoly, border = "blue", lwd = 0.5, add = TRUE)
# Compute average crown diameter
crownsPoly[["crownDiameter"]] <- sqrt(crownsPoly[["crownArea"]]/ pi) * 2
# Mean crown diameter
mean(crownsPoly$crownDiameter)
sp_summarise(ttops)
sp_summarise(crownsPoly, variables = c("crownArea", "height"))
# Compute tree count within a 10 m x 10 m cell grid
gridCount <- sp_summarise(ttops, grid = 10)
# Plot grid
plot(gridCount, col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
# Compute tree height statistics within a 10 m x 10 m cell grid
gridStats <- sp_summarise(trees = ttops, grid = 10, variables = "height")
# View layer names
names(gridStats)
# Plot mean tree height within 10 m x 10 m cell grid
plot(gridStats[["heightMean"]], col = heat.colors(255), xlab = "", ylab = "", xaxt='n', yaxt = 'n')
quant98 <- function(x, ...) quantile(x, c(.98), na.rm = TRUE)
# Create list of functions
custFuns <- list(quant98, max)
names(custFuns) <- c("98thQuantile", "Max")
# Generate statistics for crown areas and tree heights
sp_summarise(crownsPoly, variables = c("crownArea", "height"), statFuns = custFuns)
# Write a crown map raster file
writeRaster(crowns, "D:/Sedi'sFiles/prototype/raster out/3crown.tif", datatype = "INT2U",)
library(rgdal)
writeOGR(ttops, "D:/Sedi'sFiles/prototype/raster out", "3cell", driver = "ESRI Shapefile")
writeOGR(crownsPoly, "D:/Sedi'sFiles/prototype/raster out", "e3", driver = "ESRI Shapefile")
library(idbr)
install.packages("sf")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("readxl")
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
library(idbr)
install.packages("installr")
install.packages("sf")
install.packages("tidyverse")
setwd("C:/Users/ghiasi/Documents/GitHub/LA588_Sedi/Assignment3")
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
library(idbr)
library(ggplot2)
# Load the world data
data("world")
library(tidycensus)
# Load the world data
data("world")
library(tidycensus)
library(tidyverse)
median_age <- get_acs(
geography = "county",
variables = "B01002_001",
year = 2020
)
total_population_10 <- get_decennial(
geography = "state",
variables = "P001001",
year = 2010
)
census_api_key("a8dc821f6bbdacbbc578b2c50f5c7b302e275099", install = TRUE)
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
# Convert to a tibble and calculate median income as a numeric value
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
library(tidyverse)
library(tidyCensus)
install.packages("installr")
install.packages("sf")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("readxl")
library(ggplot2)
library(dplyr)
library(tidycensus)
library(sf)
library(readxl)
library(idbr)
library(ggplot2)
library(tidycensus)
library(tidyverse)
median_age <- get_acs(
geography = "county",
variables = "B01002_001",
year = 2020
)
total_population_10 <- get_decennial(
geography = "state",
variables = "P001001",
year = 2010
)
#census_api_key("a8dc821f6bbdacbbc578b2c50f5c7b302e275099", install = TRUE)
library(tidyverse)
library(tidyCensus)
install.packages("sf")
install.packages("dplyr")
install.packages("readxl")
library(tidyverse)
library(tidyCensus)
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
library(tidycensus)
library(tidyverse)
# Load median household income data by state from the ACS 2019 5-year estimates
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
# Convert to a tibble and calculate median income as a numeric value
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
setwd("C:/Users/ghiasi/Documents/GitHub/LA588_Sedi/Assignment3")
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
med_income_tibble <- as_tibble(med_income) %>%
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
is(B19013_001)
is("B19013_001")
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
rlang::last_error()
rlang::last_trace()
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
print(med_income)
# Convert to a tibble and calculate median income as a numeric value
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(B19013_001))
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(df$B19013_001))
