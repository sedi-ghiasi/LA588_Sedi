# Maybe change the size and color of the circles
# Note for the color you can also use the hex color value
map <- leaflet(myData) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, popup= paste("<strong>",
myData$last_name, "</strong><br>", "country: ",
myData$country), weight = 12, radius=1000,
color="green", stroke = TRUE, fillOpacity = 0.8)
map
# Time to add some options for the base map
# See the complete set of Leaflet providers
# http://leaflet-extras.github.io/leaflet-providers/preview/index.html
# Running the following should display the map layers in the console.
# We now have an button containing a group of background layers
map <- leaflet(myData) %>%
addTiles(group = "OSM", options = providerTileOptions(minZoom = 4, maxZoom = 10)) %>%
addProviderTiles("Stamen.TonerLite", group = "Toner",
options = providerTileOptions(minZoom = 8, maxZoom = 10)) %>%
addProviderTiles("Thunderforest", group = "Water Color") %>%
addProviderTiles("TomTom", group = "Topo") %>%
addProviderTiles("OpenPtMap", group = "Mapnik") %>%
addProviderTiles("HERE.normalDayTraffic", group = "CartoDB") %>%
addLayersControl(baseGroups = c("OSM", "Toner", "Water Color", "Topo", "Mapnik", "CartoDB"),
options = layersControlOptions(collapsed = TRUE)) %>%
addCircles(~longitude, ~latitude, popup= paste("<strong>",
myData$last_name, "</strong><br>", "Shirt Size: ",
myData$country), weight = 4, radius=40,
color="red", stroke = TRUE, fillOpacity = 0.8)
map
# Wow, that was a lot of points! How about only the first 200 observations?
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("TomTom",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude)
map
# Make clusters, note this only appears to work with addMarkers
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude, clusterOptions = markerClusterOptions())
map
# One more try on all 1,000 locations
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 6, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude, clusterOptions = markerClusterOptions())
map
county_pop_places <- st_read("correctedshp.shp")
#county_pop_places <- county_pop_places %>% select(-geometry)
#st_write(county_pop_places, "new3_shapefile.shp")
#Data <- st_read("new3_shapefile.shp")
# Set the projection to use lat and longs
county_pop_places <- st_transform(county_pop_places, crs = 4326)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,  # borders of all counties
color = "green", fill = NA, weight = 1)
m
# Display only a few counties, Boone and Green for example.
county_pop_places_selection1 <- county_pop_places %>%
filter(DOMCountyI %in% c(1:20))
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection1,  # borders of all counties
color = "#ffff00", fillColor = "green", weight = 3, opacity = 0.50, fillOpacity = 0.5, stroke = TRUE)
m
?leaflet::addPolygons
# Or maybe only the counties with no participants? Look for not > than 0 or NA
county_pop_places_selection2 <-county_pop_places %>%
filter(is.na(TYPE) | !TYPE > 4)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8)
m
# What if I wanted to show both of the special county selections?
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8) %>%
# Add the additional polygon! This woudl work for markers as well!!!
addPolygons(data = county_pop_places_selection1,  # borders of all counties
color = "blue", fillColor = "white", weight = 5,
opacity = 0.75, fillOpacity = 0.8)
m
# Select the color scheme from Color Brewer
library("RColorBrewer") #I think either Leaflet or tidyverse loads this for you
display.brewer.all()
bins <- c(0, 1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12 Inf)
install.packages("leaflet", "leaflet.providers", "tidyverse")
bins <- c(0, 1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12, Inf)
pal <- colorBin("PiYG", domain = county_pop_places$TYPE, bins = bins)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "black",
dashArray = "1",
fillOpacity = 0.8)
m
# Add interaction
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#466",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
# With that working we now need to display the county and the count in a popup
# Start with the description of the labels , must do this before
# loading the map reference for sprintf
# is https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/sprintf
labels <- sprintf(
"<strong>%s</strong><br/>%g TYPE",
county_pop_places$QUAD_NAME, county_pop_places$TYPE
) %>% lapply(htmltools::HTML)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto"))
m
#finally we can add a legend! I will append this to m
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "IOWA POPULATED PLACES",
position = "bottomright")
#But we would prefer to have
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
library(htmlwidgets)
#This does the same as export and creates a single 1.7 MB file
saveWidget(m, file="m.html")
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
lookup<- read.csv("IowaStudentsDiversity.csv", header = TRUE)
myData <- lookup
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 10, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
lookup<- read.csv("IowaStudentsDiversity.csv", header = TRUE)
#I created an excel file using https://www.mockaroo.com/
lookup<- read.csv("IowaStudentsDiversity.csv", header = TRUE)
myData <- lookup
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 10, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
lookup<- read.csv("IowaStudentsDiversity.csv", header = TRUE)
myData <- lookup
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 10, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 10, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62)
map <- leaflet(myData) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon)
map
map <- leaflet(myData) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, label = myData$country)
map
map <- leaflet(myData) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, popup = paste("<strong>",
myData$last_name, "</strong><br>", "country: ",
myData$country))
map
map <- leaflet(myData) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, popup= paste("<strong>",
myData$last_name, "</strong><br>", "country: ",
myData$country), weight = 12, radius=1000,
color="green", stroke = TRUE, fillOpacity = 0.8)
map
map <- leaflet(myData) %>%
addTiles(group = "OSM", options = providerTileOptions(minZoom = 4, maxZoom = 10)) %>%
addProviderTiles("Stamen.TonerLite", group = "Toner",
options = providerTileOptions(minZoom = 8, maxZoom = 10)) %>%
addProviderTiles("Thunderforest", group = "Water Color") %>%
addProviderTiles("TomTom", group = "Topo") %>%
addProviderTiles("OpenPtMap", group = "Mapnik") %>%
addProviderTiles("HERE.normalDayTraffic", group = "CartoDB") %>%
addLayersControl(baseGroups = c("OSM", "Toner", "Water Color", "Topo", "Mapnik", "CartoDB"),
options = layersControlOptions(collapsed = TRUE)) %>%
addCircles(~longitude, ~latitude, popup= paste("<strong>",
myData$last_name, "</strong><br>", "Shirt Size: ",
myData$country), weight = 4, radius=40,
color="red", stroke = TRUE, fillOpacity = 0.8)
map
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("TomTom",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude)
map
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("TomTom",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude, icon = greenLeafIcon)
map
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude, ,icon = greenLeafIcon,clusterOptions = markerClusterOptions())
map
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 15, iconHeight = 45,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62)
map <- leaflet(myData[1:50,]) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 4, maxZoom = 10))%>%
addMarkers(~longitude, ~latitude, ,icon = greenLeafIcon,clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 6, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 20, iconHeight = 60,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62)
greenLeafIcon <- makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 20, iconHeight = 60,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62)
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 6, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 4, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 6, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 8, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 6, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
map <- leaflet(myData) %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(minZoom = 7, maxZoom = 20))%>%
addMarkers(~longitude, ~latitude,icon = greenLeafIcon, clusterOptions = markerClusterOptions())
map
county_pop_places <- st_read("correctedshp.shp")
county_pop_places <- st_transform(county_pop_places, crs = 4326)
#setting bounds
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,  # borders of all counties
color = "green", fill = NA, weight = 1)
m
#setting bounds
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
county_pop_places_selection1 <- county_pop_places %>%
filter(DOMCountyI %in% c(1:20))
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection1,  # borders of all counties
color = "#ffff00", fillColor = "green", weight = 3, opacity = 0.50, fillOpacity = 0.5, stroke = TRUE)
m
# Or maybe only the counties with TYPE>4
county_pop_places_selection2 <-county_pop_places %>%
filter(is.na(TYPE) | !TYPE > 4)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8) %>%
# Add the additional polygon! This woudl work for markers as well!!!
addPolygons(data = county_pop_places_selection1,  # borders of all counties
color = "blue", fillColor = "white", weight = 5,
opacity = 0.75, fillOpacity = 0.8)
m
library("RColorBrewer") #I think either Leaflet or tidyverse loads this for you
display.brewer.all()
bins <- c(0, 1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12, Inf)
pal <- colorBin("Greens", domain = county_pop_places$TYPE, bins = bins)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "black",
dashArray = "1",
fillOpacity = 0.8)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.2,
opacity = 1,
color = "black",
dashArray = "1",
fillOpacity = 0.8)
m
# Add interaction
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#466",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
# Add interaction
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#466",
#dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#466",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
labels <- sprintf(
"<strong>%s</strong><br/>%g TYPE",
county_pop_places$QUAD_NAME, county_pop_places$TYPE
) %>% lapply(htmltools::HTML)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = county_pop_places,
fillColor = ~pal(TYPE),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto"))
m
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "IOWA POPULATED PLACES",
position = "bottomright")
#But we would prefer to have
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "IOWA POPULATED PLACES",
position = "bottomright")
bounds <- county_pop_places %>%
st_bbox() %>%
as.character()
fitBounds(m, bounds[1], bounds[2], bounds[3], bounds[4])
library(htmlwidgets)
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "IOWA POPULATED PLACES",
position = "bottomright")
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
