ggplot(world, aes(x = gdp_cap, y = lifeExp, color = region)) +
geom_point(size = 2, alpha = 0.8) +
scale_x_log10(labels = scales::dollar_format(scale = 1e-12)) +
labs(x = "GDP per Capita", y = "Life Expectancy", title = "World Data by Region") +
theme_classic()
# Load world data
data("world")
library(idbr)
# Load world data
data("world")
library(ggplot2)
# Load diamonds data
data("diamonds")
# Create box plot of diamond prices by cut
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
labs(x = "Cut", y = "Price", title = "Diamond Prices by Cut") +
theme_classic()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
labs(x = "Cut", y = "Price", title = "Diamond Prices by Cut") +
theme_classic()+
theme(plot.title = element_text(size = 16)) # Set title font size to 16
df <- read_excel("tree_2")
df <- read_excel("tree_2.csv")
df<- read.csv("sample.csv")
setwd("C:/Users/ghiasi/Documents/GitHub/LA588_Sedi/Assignment3")
df<- read.csv("sample.csv")
# Read Excel file
df<- read.csv("tree_2.csv")
# Read Excel file
df<- read.csv("tree_2.csv")
# Count number of each value in column A
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
E_count <- df %>%
filter(quality == "D") %>%
nrow()
F_count <- df %>%
filter(quality == "E") %>%
nrow()
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
##part3
library(tidyverse)
# Read Excel file
df<- read.csv("tree_2.csv")
# Count number of each value in column A
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
D_count <- df %>%
filter(quality == "D") %>%
nrow()
E_count <- df %>%
filter(quality == "E") %>%
nrow()
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
options(repr.plot.width = 8, repr.plot.height = 8) # increase plot size
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
options(repr.plot.width = 16, repr.plot.height = 16) # increase plot size
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
options(repr.plot.width = 30, repr.plot.height = 30) # increase plot size
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
df<- read.csv("tree_2.csv")
# Count number of each value in column A
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
D_count <- df %>%
filter(quality == "D") %>%
nrow()
E_count <- df %>%
filter(quality == "E") %>%
nrow()
# Create pie chart of counts
options(repr.plot.width = 30, repr.plot.height = 30) # increase plot size
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
options(repr.plot.width = 30, repr.plot.height = 30) # increase plot size
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES"),
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES",
width = 8, height = 8)
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES",width = 8, height = 8)
ggplot(quality_count, aes(x = "", y = n, fill = quality)) +
geom_col(width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Quality", x = NULL, y = NULL, title = "Distribution of Trees") +
theme_void() +
theme(plot.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15)) +
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
df<- read.csv("tree_2.csv")
# Count number of each value in column A
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
D_count <- df %>%
filter(quality == "D") %>%
nrow()
E_count <- df %>%
filter(quality == "E") %>%
nrow()
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
par(mar = c(5, 5, 5, 5)) # Adjust the margins as needed
windows(width = 8, height = 8) # Set the window size
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
par(mar = c(5, 5, 5, 5)) # Adjust the margins as needed
windows(width = 8, height = 8) # Set the window size
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
par(mar = c(5, 5, 5, 5)) # Adjust the margins as needed
windows(width = 8, height = 8) # Set the window size
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
ggplot(quality_counts, aes(x = "", y = n, fill = quality)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Trees by Quality") +
theme_void()
par(mar = c(5, 5, 5, 5)) # Adjust the margins as needed
windows(width = 8, height = 8) # Set the window size
# Create pie chart of counts
ggplot(quality_counts, aes(x = "", y = n, fill = quality)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Trees by Quality") +
theme_void()
par(mar = c(5, 5, 5, 5)) # Adjust the margins as needed
windows(width = 8, height = 8) # Set the window size
# Create pie chart of counts
ggplot(quality_counts, aes(x = "", y = n, fill = quality)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Trees by Quality") +
theme_void()
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
library(tidycensus)
library(tmap)
install.packages("tmap")
library(tidycensus)
library(tmap)
library(sf)
cook_bg <- get_acs(state = "IL", county = "Cook", geography = "block group", variables = "B01001_001", year = 2019)
cook_bg_sf <- st_as_sf(cook_bg)
library(tidycensus)
library(tmap)
library(sf)
cook_bg <- get_acs(state = "IL", county = "Cook", geography = "block group", variables = "B01001_001", year = 2019)
cook_bg_sf <- st_as_sf(cook_bg)
library(tidycensus)
library(tmap)
library(sf)
cook_bg <- get_acs(state = "IL", county = "Cook", geography = "block group", variables = "B01001_001", year = 2019)
cook_bg_sf <- st_as_sf(cook_bg)
library(usmap)
library(usmap)
install.packages("usmap")
library(usmap)
usmap::plot_usmap()
usmap::plot_usmap(regions = "counties")
usmap::fips(state = "IA")
library(usmap)
library(tidyverse)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA", county = TRUE)
ia_counties <- usmap::fips(state = "MA", county = TRUE)
ia_counties <- usmap::fips(state = "IA", county = TRUE)
library(tidyverse)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA", county = TRUE)
ia_counties <- usmap::fips(state = "IOWA", county = TRUE)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "Iowa", county = TRUE)
ia_counties <- usmap::fips(state = "MA", county = TRUE)
ia_counties <- usmap::fips(state = "MA", county = TRUE)
ia_counties <- usmap::fips(state = "MA", county = TRUE)
ia_counties <- usmap::fips(state = "IA", county = TRUE)
library(usmap)
library(tidyverse)
ia_counties <- usmap::fips(state = "IA", county = TRUE)
ia_counties <- usmap::fips(state = "MA", county = TRUE)
library(usmap)
library(tidyverse)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "MA", county = TRUE)
usmap::fips(state = "IA")
#> [1] "25"
usmap::fips(state = "Iowa")
ia_counties <- usmap::fips(state = "IA", county = TRUE)
ia_counties <- usmap::fips(state = "IA", county = TRUE)
a_counties <- usmap::fips(state = "IA")
county_data <- data.frame(fips = ia_counties$FIPS, county = ia_counties$NAME)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA")
# Create a data frame of county FIPS codes and names
county_data <- data.frame(fips = ia_counties$FIPS, county = ia_counties$NAME)
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA", county = TRUE)
ia_counties <- usmap::fips(state = "IA")
# Extract FIPS codes for counties in Iowa
ia_county_fips <- ia_counties[, "FIPS"]
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA")
# Extract FIPS codes for counties in Iowa
ia_county_fips <- ia_counties[, 1]
ia_counties <- usmap::fips(state = "IA")
ia_counties <- usmap::fips(state = "IA")
library(usmap)
ia_counties <- usmap::fips(state = "IA")
# Extract FIPS codes for counties in Iowa
ia_county_fips <- ia_counties[, 1]
ia_county_fips <- ia_counties[, ]
ia_county_fips <- ia_counties[,2 ]
ia_counties <- usmap::fips(state = "IA")
ia_counties <- usmap::fips(state = "MA")
ia_county_fips <- ia_counties[,2 ]
# Extract FIPS codes for counties in Iowa
ia_county_fips <- ia_counties[1,2 ]
# Create a data frame of county FIPS codes and names
county_data <- data.frame(fips = ia_county_fips, Ma_countie)
ia_county_fips <- ia_counties[,1 ]
# Create a data frame of county FIPS codes and names
county_data <- data.frame(fips = ia_county_fips, county ="IOWA")
# Create a data frame of county FIPS codes and names
county_data <- data.frame(fips = # Get Iowa county FIPS codes
ia_counties, county ="IOWA")
ia_map <- ggplot() +
geom_sf(data = usmap::us_map("states", regions = "IA"), fill = "white", color = "black") +
geom_sf(data = usmap::us_map("counties", regions = ia_county_fips), fill = NA, color = "black") +
theme_void()
# Get Iowa county FIPS codes
ia_counties <- usmap::fips(state = "IA")
ia_map_labels
ia_map_labels <- ia_map +
geom_sf_text(data = county_data, aes(label = county), color = "black", size = 2, check_overlap = TRUE) +
theme_void()
usmap::fips(state = "MA")
usmap::fips_info(c("30", "33", "34"))
plot_usmap(regions = "counties") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
DF %>% select(START_with("S"))
df<- usmap select(START_with("S"))%>%
df<- usmap%>% select(START_with("S"))
library(usmap)
df<- usmap%>% select(START_with("S"))
plot_usmap(include = .south_region, exclude = c("VA"), labels = TRUE)
lot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(include = c("CT", "ME", "MA", "NH", "VT")) +
labs(title = "New England Region") +
theme(panel.background = element_rect(color = "blue"))
install.packages("installr")
install.packages("sf")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("readxl")
install.packages("tmap")
library(usmap)
library(tidyverse)
library(usmap)
library(ggplot2)
library(dplyr)
library(tidycensus)
library(tidyverse)
library(sf)
library(readxl)
library(idbr)
library(ggplot2)
install.packages("readxl")
install.packages("tmap")
install.packages("dplyr")
install.packages("sf")
install.packages("tidyverse")
med_income <- get_acs(geography = "state",
variables = "B19013_001",
year = 2019,
survey = "acs5")
med_income_tibble <- as_tibble(med_income) %>%
mutate(median_income = as.numeric(estimate))
print(med_income)
med_income_df <- as.data.frame(med_income_tibble) %>%
rename(state = NAME) %>%
mutate(state = as.factor(state))
ggplot(med_income_df, aes(x = state, fill = median_income)) +
geom_bar() +
theme_minimal() +
labs(title = "Median Income by State", y = "Median Income", x = "State") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20))
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
labs(x = "Cut", y = "Price", title = "Diamond Prices by Cut") +
theme_classic()+
theme(plot.title = element_text(size = 16)) # Set title font size to 16
df<- read.csv("tree_2.csv")
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
D_count <- df %>%
filter(quality == "D") %>%
nrow()
E_count <- df %>%
filter(quality == "E") %>%
nrow()
#figure size
par(mar = c(5, 5, 5, 5))
# Setting the window size
windows(width = 8, height = 8)
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
# Reading Excel file
df<- read.csv("tree_2.csv")
# Counting number of each value in column "quality"
A_count <- df %>%
filter(quality == "A") %>%
nrow()
B_count <- df %>%
filter(quality == "B") %>%
nrow()
C_count <- df %>%
filter(quality == "C") %>%
nrow()
D_count <- df %>%
filter(quality == "D") %>%
nrow()
E_count <- df %>%
filter(quality == "E") %>%
nrow()
#figure size
par(mar = c(5, 5, 5, 5))
# Setting the window size
windows(width = 8, height = 8)
# Create pie chart of counts
pie(c(A_count, B_count, C_count, D_count, nrow(df)-(A_count+B_count+C_count+D_count+E_count)),
labels = c("A", "B", "C","Other"),
main = "Distribution of TREES")
plot_usmap(include = c("CT", "ME", "MA", "NH", "VT")) +
labs(title = "New England Region") +
theme(panel.background = element_rect(color = "blue"))
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(include = c("CT", "ME", "MA", "NH", "VT")) +
labs(title = "New England Region") +
theme(panel.background = element_rect(color = "blue"))
plot_usmap(data = countypov, values = "pct_pov_2014", include = c("CT", "ME", "MA", "NH", "VT"), color = "blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Poverty Percentage Estimates", label = scales::comma) +
labs(title = "New England Region", subtitle = "Poverty Percentage Estimates for New England Counties in 2014") +
theme(legend.position = "right")
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "New England Region") +
theme(panel.background = element_rect(color = "blue"))
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "sELECTED Region") +
theme(panel.background = element_rect(color = "blue"))
#selected  region
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "sELECTED Region") +
theme(panel.background = element_rect(color = "blue"))
#part5
#selected  region
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "selected Region") +
theme(panel.background = element_rect(color = "blue"))
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "selected Region") +
theme(panel.background = element_rect(color = "blue")+theme(plot.title = element_text(size = 16)) )
#part5
#selected  region
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "selected Region") +
theme(panel.background = element_rect(color = "blue")+theme(plot.title = element_text(size = 25)) )
#part5
#selected  region
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "selected Region") +
theme(panel.background = element_rect(color = "blue")+theme(plot.title = element_text(size = 25))
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "Selected Region") +
theme(
panel.background = element_rect(color = "blue"),
plot.title = element_text(size = 30) # Increase font size to 30
)
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "Selected Region") +
theme(
panel.background = element_rect(color = "blue"),
plot.title = element_text(size = 30),
plot.title.position = "plot" # Center title in the middle
)
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "Selected Region") +
theme(
panel.background = element_rect(color = "blue"),
plot.title = element_text(size = 30, hjust = 0.5, vjust = 0.5), # Center title in the middle
plot.title.position = "plot"
)
plot_usmap(include = c("IA", "TX", "MA", "NH", "VT")) +
labs(title = "Selected Region") +
theme(
panel.background = element_rect(color = "blue"),
plot.title = element_text(size = 30, hjust = 0.5, vjust = 0.5),
plot.title.position = "plot"
)
ggplot(med_income_df, aes(x = state, fill = median_income)) +
geom_bar() +
theme_minimal() +
labs(title = "Median Income by State", y = "Median Income", x = "State") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20),  plot.title = element_text(size = 30, hjust = 0.5, vjust = 0.5),
plot.title.position = "plot")
